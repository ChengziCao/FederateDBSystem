syntax = "proto2";
import "google/protobuf/empty.proto";
import "common.proto";
package federate;
//是否运行生成多个java文件
option java_multiple_files = false;
//定义包名
option java_package = "com.suda.federate.rpc";
//定义生成的类名称
option java_outer_classname = "FederateService";


message SQLExpression{
  /*---params---*/
  optional Point point = 1;
  optional Polygon polygon = 12;
  optional double literal = 7;
  optional int32 t = 4;
  /*-----------*/
  optional int32 id = 2;
  repeated int32 idList = 3;
  required string function = 5;
  required string table = 6;

  optional int32 fetch = 8 [default = 0];
  repeated string order = 9;
  optional string groupby = 10;
  optional string uuid = 11;
}

// The greeting service definition.

service Federate {
  rpc AddClient(AddClientRequest) returns (GeneralResponse);// 打招呼，打通了说明add成功了，更稳妥，还没做
  rpc GetResult (SQLExpression) returns (SQLReply) {}
  rpc RangeCount (SQLExpression) returns (SQLReply) {}
  rpc RangeQuery (SQLExpression) returns (SQLReplyList) {}
  rpc PolygonRangeQuery(SQLExpression) returns (SQLReplyList) {}
  rpc privacyRangeQuery (SQLExpression) returns (Status) {}
  rpc privacyPolygonRangeQuery(SQLExpression) returns (Status) {}
  rpc KnnRadiusQuery (SQLExpression) returns (KnnRadiusQueryResponse) {}
  rpc privacyUnion (UnionRequest) returns (UnionResponse){}
  rpc localUnion (UnionRequest) returns (UnionResponse){}
  rpc ClearCache(CacheID) returns (google.protobuf.Empty);

}
message CacheID {
  required string uuid = 1;
}
message KnnRadiusQueryResponse {
  required double radius = 1;
}
message UnionRequest{
  repeated Point point = 1;
  required int32 loop = 2;// loop=0,1 0:add; 1:del
  required int32 index = 3 [default = 0];
  repeated string endpoints = 4;//RangeQuery时就把id发出去，endpoints[index]，各silo和master一样，也保存一份federateClientMap
  required string uuid = 5;
}
message UnionResponse{
  repeated Point point = 1;
  required int32 loop = 2;
  required int32 index = 3 [default = 0];
  repeated string endpoints = 4;//RangeQuery时就把id发出去，endpoints[index]，各silo和master一样，也保存一份federateClientMap
  required string uuid = 5;

}
enum Code {
  kOk = 1;
  kAddClientFailed = 2;
  kCacheNotExist = 3;
}

message Status {
  required Code code = 1 [default = kOk];
  required string msg = 2 [default = "ok"];
}

message AddClientRequest {
  required string endpoint = 1;
}

message GeneralResponse {
  required Status status = 1;
}

message SQLRequest {
  required string sql = 1;
}

// The response message containing the greetings

message SQLReply {
  repeated int32 fakeLocalSum = 2;
  required double message = 1;

}
message SQLReplyList {

  repeated Point message = 1;

}

//TODO 使用Steam 流 返回rangeQuery结果，为join操作打下基础
//message HeaderProto {
//  repeated string name = 1;
//  repeated int32 type = 2;
//  repeated int32 level = 3;
//  required bool isPrivacyAgg = 4;
//}
//
//message RowsProto {
//  repeated bytes row = 1;
//}
//// todo: RowsProto use RowFields
//message DataSetProto {
//  required HeaderProto header = 1;
//  required RowsProto rows = 2;
//  optional string uuid = 3;
//}