syntax = "proto2";
import "google/protobuf/empty.proto";
import "common.proto";
package federate;
//是否运行生成多个java文件
option java_multiple_files = false;
//定义包名
option java_package = "com.suda.federate.rpc";
//定义生成的类名称
option java_outer_classname = "FederateService";


message SQLExpression{
  required Point point=1;
  optional int32 id =2;
  repeated int32 idList=3;
  optional int32 t=4;
  required string function=5;
  required string table=6;
  required double literal =7;
  optional int32 fetch = 8 [default = 0];
  repeated string order = 9;
  optional string groupby=10;
  optional string uuid = 11;
}
//message Query {
//  required string function = 1;//Range_count
//  repeated string projectExp = 3;
//  repeated Expression filterExp = 5;
//  required int32 fetch = 6;
//  repeated string order = 7;
//  optional string aggUuid = 8;
//}

// The greeting service definition.

service Federate {

  // Sends a greeting
  rpc AddClient(AddClientRequest) returns (GeneralResponse);
  rpc GetResult (SQLExpression) returns (SQLReply) {}
  rpc RangeCount (SQLExpression) returns (SQLReply) {}
  rpc RangeQuery (SQLExpression) returns (SQLReplyList) {}
  rpc privacyRangeQuery (SQLExpression) returns (Status) {}
  rpc KnnRadiusQuery (SQLExpression) returns (SQLReply) {}
  rpc privacyUnion (UnionRequest) returns (UnionResponse){}
  rpc localUnion (UnionRequest) returns (UnionResponse){}
}
message UnionRequest{
  repeated Point point=1;
  required int32 loop=2;// loop=0,1 loop==1&& index==endpoints.length结束
  required int32 index=3 [default=0];//记录loop的顺序,且 完成的设为 negative
  repeated string endpoints=4;//RangeQuery时就把id发出去，endpoints[index]，各silo和master一样，也保存一份federateClientMap
  required string uuid = 5;
//  required bool end=6;
}
message UnionResponse{
  repeated Point point=1;
  required int32 loop=2;// loop=0,1 loop==1&& index==endpoints.length结束
  required int32 index=3 [default=0];//记录loop的顺序,且 完成的设为 negative
  repeated string endpoints=4;//RangeQuery时就把id发出去，endpoints[index]，各silo和master一样，也保存一份federateClientMap
  required string uuid = 5;
//  required bool end=6;
}
enum Code {
  kOk = 1;
  kAddClientFailed = 2;
  kCacheNotExist = 3;
}

message Status {
  required Code code = 1 [default = kOk];
  required string msg = 2 [default = "ok"];
}

message AddClientRequest {
  required string endpoint = 1;
}

message GeneralResponse {
  required Status status = 1;
}

message SQLRequest {
  required string sql=1;
}

// The response message containing the greetings

message SQLReply {
  repeated int32 fakeLocalSum =2;
  required double message = 1;

}
message SQLReplyList {

  repeated Point message = 1;

}
